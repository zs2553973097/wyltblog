# Host: localhost  (Version: 5.7.26)
# Date: 2020-11-16 13:20:09
# Generator: MySQL-Front 5.3  (Build 4.234)

/*!40101 SET NAMES utf8 */;

#
# Structure for table "blog_about"
#

DROP TABLE IF EXISTS `blog_about`;
CREATE TABLE `blog_about` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(1024) DEFAULT NULL COMMENT '正文',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='关于本人表';

#
# Data for table "blog_about"
#

INSERT INTO `blog_about` VALUES (1,'潦倒程序员，<div>每日学习然并卵，</div><div>现居湘西吉首。<p><br></p></div>',NULL,NULL);

#
# Structure for table "blog_archive"
#

DROP TABLE IF EXISTS `blog_archive`;
CREATE TABLE `blog_archive` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='归档表';

#
# Data for table "blog_archive"
#


#
# Structure for table "blog_category"
#

DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL COMMENT '主分类名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='主分类表';

#
# Data for table "blog_category"
#

INSERT INTO `blog_category` VALUES (1,'编程'),(2,'游记'),(3,'随笔'),(4,'读书'),(5,'影视'),(6,'音乐');

#
# Structure for table "blog_content"
#

DROP TABLE IF EXISTS `blog_content`;
CREATE TABLE `blog_content` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sub_category_id` varchar(255) DEFAULT NULL COMMENT '子分类id',
  `title` varchar(255) DEFAULT NULL COMMENT '博客内容标题',
  `content` longtext COMMENT '博客具体内容',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  `origin` varchar(2048) DEFAULT NULL COMMENT '来源',
  `reference` varchar(255) DEFAULT NULL COMMENT '出处',
  `category_id` int(11) DEFAULT NULL COMMENT '文章所属分类的父id',
  `article_verify` tinyint(1) DEFAULT '1' COMMENT '文章审核，0不通过，1审核通过',
  `bill` varchar(255) DEFAULT NULL COMMENT '文章封面',
  `description` varchar(255) DEFAULT NULL COMMENT '文章描述',
  `browser_num` int(11) DEFAULT '0' COMMENT '浏览次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='博客内容表';

#
# Data for table "blog_content"
#

INSERT INTO `blog_content` VALUES (1,'8','TIOBE 11 月编程语言：Java 首次跌出前二，Python 势不可挡','<p><br></p><div style=\"outline: 0px; padding-top: 8px; border-bottom: 1px solid rgb(245, 246, 247); z-index: 9; background-color: rgb(255, 255, 255); color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div style=\"outline: 0px;\"><div style=\"outline: 0px; position: relative; background: rgb(247, 247, 252); border-radius: 4px;\"><div style=\"outline: 0px; color: rgb(153, 154, 170); width: 679.359px; display: flex;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/original.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 36px; height: 32px; margin-right: 12px; line-height: 32px;\"><div style=\"outline: 0px;\"><a href=\"https://me.csdn.net/csdnnews\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 20px; cursor: pointer; background-color: transparent; color: rgb(88, 147, 194); vertical-align: top; line-height: 32px;\">CSDN资讯</a>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px; position: relative;\">2020-11-05 09:44:14</span>&nbsp;<img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 24px; height: 24px; margin-top: 4px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">19075</span>&nbsp;<a id=\"blog_detail_zk_collection\" style=\"outline: none; margin-right: 12px; cursor: pointer; background-color: transparent; vertical-align: top; line-height: 32px; color: rgb(153, 154, 170); display: inline-block;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 20px; height: 20px; margin-right: 2px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">收藏</span>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">144</span></a></div></div><div style=\"outline: 0px; padding-left: 48px; display: flex;\"><div style=\"outline: 0px; margin-right: 8px; margin-bottom: 4px; font-size: 13px; line-height: 24px;\"><span style=\"outline: 0px; display: inline-block; color: rgb(153, 154, 170);\">分类专栏：</span>&nbsp;<a href=\"https://blog.csdn.net/csdnnews/category_10004965.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">资讯</a></div></div><div style=\"outline: 0px; position: absolute; top: 0px; right: 8px; line-height: 32px;\"><a style=\"outline: none; padding-right: 4px; padding-left: 4px; cursor: pointer; background-color: transparent; position: relative; color: rgb(143, 176, 201); font-size: 12px;\">版权</a></div></div></div></div><article style=\"box-sizing: inherit; outline: 0px; position: relative; padding-top: 16px; color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div id=\"article_content\" style=\"outline: 0px; overflow-wrap: break-word;\"><div id=\"content_views\" style=\"outline: 0px; overflow-wrap: break-word; position: relative; min-height: 70px; word-break: break-word !important; font-size: 16px !important;\"><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20201105094254456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><blockquote style=\"outline: 0px; padding: 16px; margin-top: 0px; margin-bottom: 24px; color: rgba(0, 0, 0, 0.5); border-left-color: rgb(221, 223, 228); background: rgb(238, 240, 244); overflow: auto; overflow-wrap: break-word; word-break: break-word !important;\"><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 0px; font-size: 14px; color: rgb(85, 86, 102); line-height: 22px; overflow-wrap: break-word;\">整理 | 郑丽媛<br style=\"outline: 0px; overflow-wrap: break-word;\">头图 | CSDN下载自视觉中国<br style=\"outline: 0px; overflow-wrap: break-word;\">出品 | CSDN（ID：CSDNnews）</p></blockquote><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">编程语言社区 TIOBE 最新发布了 11 月编程语言排行榜。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">本月的排行榜出现了自 TIOBE 榜单发布以来，近二十年从未见过的变化：前两名的位置首次出现了一个除 C 和 Java 以外的语言。C 依然位列第一，Java 跌至第三，而第二名现在是势不可挡的 Python 。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">自2018年以来，Python 的市场份额整体就开始呈上升趋势，从2018年1月占比4.68%，到本月占比12.12%，即使跟去年同期相比，增幅也高达2.27%。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">作为一个兼具简单与功能强大的编程语言，Python 易于学习、编辑周期短、具有各种框架，在数据分析、AI 、机器学习、Web 开发、测试等多个领域都有出色的发挥。而近年来数据挖掘、AI和数值计算等领域的蓬勃发展，也随之带动提高了 Python 的市场占比。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">甚至 TIOBE CEO Paul Jansen，在曾经遇到一位修车机械师都喜欢用 Python 编程之后，也开始意识到：Python 将无处不在。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">而与 Python 逐渐火爆的趋势相反，Java 自今年5月被 C 超越后，本月又再次下跌一位，首次跌出前二，市场份额的占比也大幅度下降了4.57%。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20201105094310906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">另外，第9-20名也有不同程度的变化：</p><ul style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 32px; list-style-type: disc; overflow-wrap: break-word;\"><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">R 语言、Perl 和 Go 语言名次都有大幅提升，分别为第9名、第12名和第13名。</p></li><li style=\"outline: 0px; margin-top: 8px; margin-left: 32px; list-style-type: disc; overflow-wrap: break-word;\"><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">Swift、Ruby、Delphl/Object Pascal 和 Objective-C 分别下降为第14名、第15名、第18名和第19名。</p></li><li style=\"outline: 0px; margin-top: 8px; margin-left: 32px; list-style-type: disc; overflow-wrap: break-word;\"><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">Transact-SQL 上升12名，进入 TOP 20。</p></li></ul><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"_30\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>其他编程语言排名</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">下面列出了完整的21-50名，因为是非官方发布的，所以可能存在遗漏：<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/2020110509432910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">第51-100名如下，由于它们之间的数值差异较小，仅以文本形式列出（按字母排序）：</p><ul style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 32px; list-style-type: disc; overflow-wrap: break-word;\">ABC, ActionScript, Applescript, Arc, AutoLISP, bc, Bourne shell, C shell, Clojure, CoffeeScript, Common Lisp, Crystal, cT, Dylan, Elixir, Elm, Emacs Lisp, Erlang, F#, Forth, Hack, Icon, Inform, Io, J, Korn shell, LabVIEW, Ladder Logic, Lingo, LiveCode, Maple, Mercury, MQL4, NATURAL, OpenCL, OpenEdge ABL, PL/I, PostScript, Q, REXX, Ring, RPG, Simulink, Small Basic, Solidity, SPARK, Stata, Vala/Genie, VBScript, Verilog</li></ul><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"Top_10__TIOBE_20022020_47\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>Top 10 编程语言 TIOBE 指数走势（2002-2020）</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20201105094340806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t2\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t2\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"19852020_58\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>历史排名（1985-2020）</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">注：以下排名位次取决于12个月的平均值。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20201105094349112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t3\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t3\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"20032019_71\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>编程语言“名人榜”（2003-2019）</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20201105094356265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5uZXdz,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin: auto; max-width: 100%; overflow-wrap: break-word; display: block; cursor: zoom-in;\"></p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">【说明】</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">TIOBE 编程语言社区排行榜是编程语言流行趋势的一个指标，每月更新，这份排行榜排名基于全球技术工程师、课程和第三方供应商的数量，其中包括了流行的搜索引擎以及技术社区，如 Google、百度、维基百科、CSDN、必应、Hao 123等等。具体的计算方式详见：https://www.tiobe.com/tiobe-index/programming-languages-definition/。请注意这个排行榜只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">这个排行榜可以用来考查你的编程技能是否与时俱进，也可以在开发新系统时作为一个语言选择依据。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">详细榜单信息可参考 TIOBE 官网：<a href=\"https://www.tiobe.com/tiobe-index\" style=\"outline: none; cursor: pointer; background-color: transparent; color: rgb(103, 149, 181); overflow-wrap: break-word;\">https://www.tiobe.com/tiobe-index</a></p></div></div></article>',1604695313,1604695313,'https://blog.csdn.net/csdnnews/article/details/109503999','本页',1,1,'images/2020-11-07/1604695163.png','编程语言社区 TIOBE 最新发布了 11 月编程语言排行榜。',2),(2,'1','PHP基础','<div style=\"outline: 0px; padding-top: 8px; border-bottom: 1px solid rgb(245, 246, 247); z-index: 9; background-color: rgb(255, 255, 255); color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div style=\"outline: 0px;\"><div style=\"outline: 0px; margin-bottom: 8px;\"><h1 id=\"articleContentId\" style=\"outline: 0px; margin-top: 0px; margin-bottom: 0px; font-weight: 600; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 28px; overflow-wrap: break-word; color: rgb(34, 34, 38); word-break: break-all;\"><br></h1></div><div style=\"outline: 0px; position: relative; background: rgb(247, 247, 252); border-radius: 4px;\"><div style=\"outline: 0px; color: rgb(153, 154, 170); width: 679.359px; display: flex;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/original.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 36px; height: 32px; margin-right: 12px; line-height: 32px;\"><div style=\"outline: 0px;\"><a href=\"https://me.csdn.net/Froglets\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 20px; cursor: pointer; background-color: transparent; color: rgb(88, 147, 194); vertical-align: top; line-height: 32px;\">Froglets</a>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px; position: relative;\">2020-03-03 19:21:45</span>&nbsp;<img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 24px; height: 24px; margin-top: 4px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">5588</span>&nbsp;<a id=\"blog_detail_zk_collection\" style=\"outline: none; margin-right: 12px; cursor: pointer; background-color: transparent; vertical-align: top; line-height: 32px; color: rgb(153, 154, 170); display: inline-block;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 20px; height: 20px; margin-right: 2px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">收藏</span>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">52</span></a></div></div><div style=\"outline: 0px; padding-left: 48px; display: flex;\"><div style=\"outline: 0px; margin-right: 8px; margin-bottom: 4px; font-size: 13px; line-height: 24px;\"><span style=\"outline: 0px; display: inline-block; color: rgb(153, 154, 170);\">文章标签：</span>&nbsp;<a href=\"https://www.csdn.net/gather_28/NtDagg1sNTQwLWJsb2cO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">php</a>&nbsp;<a href=\"https://so.csdn.net/so/search/s.do?q=%E5%AE%89%E5%85%A8&amp;t=blog&amp;o=vip&amp;s=&amp;l=&amp;f=&amp;viparticle=\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">安全</a>&nbsp;<a href=\"https://www.csdn.net/gather_2f/MtTaEg3sMTYyNzYtYmxvZwO0O0OO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">经验分享</a>&nbsp;<a href=\"https://www.csdn.net/gather_2d/MtTaEg3sMTY2MzQtYmxvZwO0O0OO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">程序人生</a></div></div><div style=\"outline: 0px; position: absolute; top: 0px; right: 8px; line-height: 32px;\"><a style=\"outline: none; padding-right: 4px; padding-left: 4px; cursor: pointer; background-color: transparent; position: relative; color: rgb(143, 176, 201); font-size: 12px;\">版权</a></div></div></div></div><article style=\"box-sizing: inherit; outline: 0px; position: relative; padding-top: 16px; color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div id=\"article_content\" style=\"outline: 0px; overflow-wrap: break-word;\"><div id=\"content_views\" style=\"outline: 0px; overflow-wrap: break-word; position: relative; min-height: 70px; word-break: break-word !important; font-size: 16px !important;\"><h1 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 28px; color: rgb(79, 79, 79); line-height: 36px; overflow-wrap: break-word;\"><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"PHP_0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>PHP基础—变量</h1><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"__1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>一、 变量</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">1.变量类型：整型、浮点型、布尔型、数组、对象、null（没有值也没有类型）、资源<br style=\"outline: 0px; overflow-wrap: break-word;\">2、变量检测：<br style=\"outline: 0px; overflow-wrap: break-word;\">isset可以检测变量是否存在；对于null,isset也返回false<br style=\"outline: 0px; overflow-wrap: break-word;\">eg:&nbsp;<span style=\"outline: 0px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-variant-ligatures: normal; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; font-size: 1.21em; line-height: 1.2; font-family: KaTeX_Main, &quot;Times New Roman&quot;, serif; text-rendering: auto; overflow-wrap: break-word;\"><span style=\"outline: 0px; overflow-wrap: break-word; position: absolute; clip: rect(1px, 1px, 1px, 1px); border: 0px; height: 1px; width: 1px; overflow: hidden;\">a = n u l l ; i f ( i s s e t ( a=null; if(isset(</span><span style=\"outline: 0px; overflow-wrap: break-word;\"><span style=\"outline: 0px; overflow-wrap: break-word; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span style=\"outline: 0px; overflow-wrap: break-word; display: inline-block; height: 0.43056em; vertical-align: 0em;\"></span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">a</span><span style=\"outline: 0px; margin-right: 0.277778em; overflow-wrap: break-word; display: inline-block;\"></span><span style=\"outline: 0px; overflow-wrap: break-word;\">=</span><span style=\"outline: 0px; margin-right: 0.277778em; overflow-wrap: break-word; display: inline-block;\"></span></span><span style=\"outline: 0px; overflow-wrap: break-word; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span style=\"outline: 0px; overflow-wrap: break-word; display: inline-block; height: 1em; vertical-align: -0.25em;\"></span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">n</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">u</span><span style=\"outline: 0px; margin-right: 0.01968em; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">l</span><span style=\"outline: 0px; margin-right: 0.01968em; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">l</span><span style=\"outline: 0px; overflow-wrap: break-word;\">;</span><span style=\"outline: 0px; margin-right: 0.166667em; overflow-wrap: break-word; display: inline-block;\"></span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">i</span><span style=\"outline: 0px; margin-right: 0.10764em; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">f</span><span style=\"outline: 0px; overflow-wrap: break-word;\">(</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">i</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">s</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">s</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">e</span><span style=\"outline: 0px; font-family: KaTeX_Math; overflow-wrap: break-word; font-style: italic;\">t</span><span style=\"outline: 0px; overflow-wrap: break-word;\">(</span></span></span></span></span>b)){<br style=\"outline: 0px; overflow-wrap: break-word;\">echo“变量b存在”<br style=\"outline: 0px; overflow-wrap: break-word;\">}else{<br style=\"outline: 0px; overflow-wrap: break-word;\">echo\"变量b不存在\"<br style=\"outline: 0px; overflow-wrap: break-word;\">}echo ‘<br style=\"outline: 0px; overflow-wrap: break-word;\">’</p><pre style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; padding: 8px 16px 6px 56px; position: relative; font-family: &quot;Source Code Pro&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Ubuntu Mono&quot;, &quot;Anonymous Pro&quot;, &quot;Droid Sans Mono&quot;, Menlo, Monaco, Consolas, Inconsolata, Courier, monospace, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; overflow: auto hidden; border: none; line-height: 22px; color: rgb(0, 0, 0); background-color: rgb(40, 44, 52);\"><code onclick=\"mdcp.copyCode(event)\" style=\"outline: 0px; font-family: &quot;Source Code Pro&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Ubuntu Mono&quot;, &quot;Anonymous Pro&quot;, &quot;Droid Sans Mono&quot;, Menlo, Monaco, Consolas, Inconsolata, Courier, monospace, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; line-height: 22px; color: rgb(171, 178, 191); background-color: rgb(40, 44, 52); border-radius: 4px; padding: 0.5em; overflow-x: auto; white-space: pre; overflow-wrap: break-word; min-width: 94%; text-size-adjust: none; position: unset;\">\t  /结果：b不存在\n\t\tif(isset($b)){\n\t\techo“变量a存在”\n\t\t}else{\n\t\techo\"变量a不存在\"\n\t\t}\n\t\techo‘&lt;br/&gt;’\n\t\t  /结果：a存在\n</code><ul style=\"outline: 0px; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 8px; padding-bottom: 8px; list-style: none; font-size: 18px; overflow-wrap: break-word; position: absolute; width: 48px; top: 0px; left: 0px; text-align: right;\"><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">1</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">2</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">3</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">4</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">5</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">6</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">7</li><li style=\"outline: 0px; padding-right: 8px; padding-left: 8px; font-size: inherit; overflow-wrap: break-word; border-right: 1px solid rgb(197, 197, 197); color: rgb(153, 153, 153);\">8</li></ul></pre><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">3、变量判断类型<br style=\"outline: 0px; overflow-wrap: break-word;\">gettype（）获取变量<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20200228173123475.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Zyb2dsZXRz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"><br style=\"outline: 0px; overflow-wrap: break-word;\">4、打印变量<br style=\"outline: 0px; overflow-wrap: break-word;\">echo 字符串<br style=\"outline: 0px; overflow-wrap: break-word;\">print_r 数组<br style=\"outline: 0px; overflow-wrap: break-word;\">var_dump 打印变量的类型及其值<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/202002281736248.jpg\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"><br style=\"outline: 0px; overflow-wrap: break-word;\">5、变量类型转换<br style=\"outline: 0px; overflow-wrap: break-word;\">php中变量的类型可以转换，最常见的是字符串与数字的转换或者是数字/字符串—&gt;布尔值的转换!<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20200228174632627.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Zyb2dsZXRz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"><br style=\"outline: 0px; overflow-wrap: break-word;\">6、赋值<br style=\"outline: 0px; overflow-wrap: break-word;\">传值赋值、引用赋值<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20200228175538265.jpg\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"><br style=\"outline: 0px; overflow-wrap: break-word;\">7、销毁变量 unset<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/2020022818012943.jpg\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"><br style=\"outline: 0px; overflow-wrap: break-word;\">8、动态变量名<br style=\"outline: 0px; overflow-wrap: break-word;\">用变量的值在做变量的名，如$$a;<br style=\"outline: 0px; overflow-wrap: break-word;\"><img src=\"https://img-blog.csdnimg.cn/20200228180725682.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Zyb2dsZXRz,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" style=\"outline: none; border-width: 0px; margin-top: 24px; margin-bottom: 24px; max-width: 100%; overflow-wrap: break-word; cursor: zoom-in;\"></p></div></div></article>',1604695765,1604695765,'https://blog.csdn.net/Froglets/article/details/104560179?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160469555319724842913207%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=160469555319724842913207&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-104560179.first_rank_ecpm_v3_pc_rank_v2&utm_term=php&spm=1018.2118.3001.4449','本页',1,1,NULL,'PHP基础—变量',5);
INSERT INTO `blog_content` VALUES (3,'7','Java基础面试宝典','<div style=\"outline: 0px; padding-top: 8px; border-bottom: 1px solid rgb(245, 246, 247); z-index: 9; background-color: rgb(255, 255, 255); color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div style=\"outline: 0px;\"><div style=\"outline: 0px; margin-bottom: 8px;\"><h1 id=\"articleContentId\" style=\"outline: 0px; margin-top: 0px; margin-bottom: 0px; font-weight: 600; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 28px; overflow-wrap: break-word; color: rgb(34, 34, 38); word-break: break-all;\"><br></h1></div><div style=\"outline: 0px; position: relative; background: rgb(247, 247, 252); border-radius: 4px;\"><div style=\"outline: 0px; color: rgb(153, 154, 170); width: 679.359px; display: flex;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/original.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 36px; height: 32px; margin-right: 12px; line-height: 32px;\"><div style=\"outline: 0px;\"><a href=\"https://me.csdn.net/weixin_51539510\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 20px; cursor: pointer; background-color: transparent; color: rgb(88, 147, 194); vertical-align: top; line-height: 32px;\">卑微柠檬怪</a>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px; position: relative;\">2020-11-04 14:59:39</span>&nbsp;<img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/articleReadEyes.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 24px; height: 24px; margin-top: 4px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">1100</span>&nbsp;<a id=\"blog_detail_zk_collection\" style=\"outline: none; margin-right: 12px; cursor: pointer; background-color: transparent; vertical-align: top; line-height: 32px; color: rgb(153, 154, 170); display: inline-block;\"><img src=\"https://csdnimg.cn/release/blogv2/dist/pc/img/tobarCollect.png\" alt=\"\" style=\"box-sizing: inherit; outline: none; border-width: 0px; width: 20px; height: 20px; margin-right: 2px;\">&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">收藏</span>&nbsp;<span style=\"outline: 0px; margin-right: 12px; vertical-align: top; line-height: 32px;\">79</span></a></div></div><div style=\"outline: 0px; padding-left: 48px; display: flex;\"><div style=\"outline: 0px; margin-right: 8px; margin-bottom: 4px; font-size: 13px; line-height: 24px;\"><span style=\"outline: 0px; display: inline-block; color: rgb(153, 154, 170);\">文章标签：</span>&nbsp;<a href=\"https://www.csdn.net/gather_24/NtTaIg5sMzYyLWJsb2cO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">java</a>&nbsp;<a href=\"https://www.csdn.net/gather_26/MtTaEg0sMDE2MzItYmxvZwO0O0OO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">面试</a>&nbsp;<a href=\"https://www.csdn.net/gather_22/MtTaEg0sMzU1NTAtYmxvZwO0O0OO0O0O.html\" target=\"_blank\" rel=\"noopener\" style=\"outline: none; margin-right: 8px; padding: 3px 6px; cursor: pointer; background-color: rgb(255, 255, 255); color: rgb(80, 148, 213); font-size: 12px; border: 1px solid rgb(234, 234, 239); height: 23px; line-height: 17px; border-radius: 4px; display: inline-block;\">后端</a></div></div><div style=\"outline: 0px; position: absolute; top: 0px; right: 8px; line-height: 32px;\"><a style=\"outline: none; padding-right: 4px; padding-left: 4px; cursor: pointer; background-color: transparent; position: relative; color: rgb(143, 176, 201); font-size: 12px;\">版权</a></div></div></div></div><article style=\"box-sizing: inherit; outline: 0px; position: relative; padding-top: 16px; color: rgba(0, 0, 0, 0.75); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-variant-ligatures: common-ligatures;\"><div id=\"article_content\" style=\"outline: 0px; overflow-wrap: break-word;\"><div id=\"content_views\" style=\"outline: 0px; overflow-wrap: break-word; position: relative; min-height: 70px; word-break: break-word !important; font-size: 16px !important;\"><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"1Java_0\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><span style=\"outline: 0px; overflow-wrap: break-word;\">1.Java基础知识</span></h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.1.Java源程序的扩展名是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：扩展名是.java</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.2.什么是标识符？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:在java语言中能够我们自己起名的都叫标识符</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.3.标识符有哪些特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:标识符是大小写字母、数字字符、$和_组成，不能以数字开头，也不能是java关键字，并且区分大小写</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.4.请说明环境变量Path 与 classpath 区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：path是系统用来指定可指定文件的完整路径。Path是用来搜索所执行的可执行文件路径的，如果执行的可执行文件不在当前目录下，那就会依次搜索path中设置的路径。<br style=\"outline: 0px; overflow-wrap: break-word;\">classpath是指定你在程序中所使用的类(.class)文件所在的位置。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.5. java程序经编译后产生的字节码文件扩展名是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：字节码文件扩展名是 .class</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.6.请说出常用的DOS命令并解释？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：d: 回车 ： 盘符切换<br style=\"outline: 0px; overflow-wrap: break-word;\">dir (directory) ：列出当前目录下的文件以及文件夹<br style=\"outline: 0px; overflow-wrap: break-word;\">cd (change directory) : 改变指定目录(进入指定目录)<br style=\"outline: 0px; overflow-wrap: break-word;\">cd… ： 退回到上一层目录<br style=\"outline: 0px; overflow-wrap: break-word;\">cd\\ ： 退回到跟目录<br style=\"outline: 0px; overflow-wrap: break-word;\">md (make directory) ：创建目录<br style=\"outline: 0px; overflow-wrap: break-word;\">rd (remove directory) ：删除目录<br style=\"outline: 0px; overflow-wrap: break-word;\">del (delete) ：删除文件，删除一堆后缀名一样的文件*.txt<br style=\"outline: 0px; overflow-wrap: break-word;\">cls (clear screen) ：清屏<br style=\"outline: 0px; overflow-wrap: break-word;\">exit：退出dos命令行</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.7. 请写出以下标识符的命名规则</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：包：全部小写<br style=\"outline: 0px; overflow-wrap: break-word;\">单层包：小写，举例：itcast，com<br style=\"outline: 0px; overflow-wrap: break-word;\">多层包：小写，并用 . 隔开，举例：cn.itcast， com.baidu<br style=\"outline: 0px; overflow-wrap: break-word;\">类或者接口：<br style=\"outline: 0px; overflow-wrap: break-word;\">一个单词：首字母大写，举例：Student，Demo<br style=\"outline: 0px; overflow-wrap: break-word;\">多个单词：每个单词首字母大写，举例：HelloWorld，StudentName<br style=\"outline: 0px; overflow-wrap: break-word;\">方法或者变量：<br style=\"outline: 0px; overflow-wrap: break-word;\">一个单词：首字母小写，举例：name，main<br style=\"outline: 0px; overflow-wrap: break-word;\">多个单词：从第二个单词开始，每个单词首字母大写，举例：studentAge，showStudentNames()<br style=\"outline: 0px; overflow-wrap: break-word;\">常量：全部大写<br style=\"outline: 0px; overflow-wrap: break-word;\">一个单词：大写，举例：PI<br style=\"outline: 0px; overflow-wrap: break-word;\">多个单词：大写，并用 _ 隔开，举例：STUDENT_MAX_AGE</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.8. 请解释Java语言的跨平台特性？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Java语言是跨平台运行的，其实就是不同的操作系统，使用不同的JVM映射规则，让其与操作系统无关，完成了跨平台性。JVM对上层的Java源文件是不关心的，它关注的只是由源文件生成的类文件(class file)。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.9. 请说明JDK、JRE、JVM的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：JDK: Java Development Kit(Java开发工具包)。JDK是整个JAVA的核心，包括了Java运行环境(Java Runtime Environment)，一堆Java工具（javac/java/javap等）<br style=\"outline: 0px; overflow-wrap: break-word;\">JRE：Java Runtime Environment(java运行时环境)。也就是我们说的JAVA平台。所有的Java程序都要在JRE下才能运行。包括JVM和JAVA核心类库和支持文件。与JDK相比，它不包含开发工具(编译器、调试器和其他工具)。<br style=\"outline: 0px; overflow-wrap: break-word;\">JVM：Java Virtual Mechinal(JAVA虚拟机)。JVM是JRE的一部分，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.10. 注释的分类及作用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：单行注释、多行注释、文档注释<br style=\"outline: 0px; overflow-wrap: break-word;\">单行注释：注释单行代码或为单行代码添加描述的时候使用<br style=\"outline: 0px; overflow-wrap: break-word;\">多行注释：注释多行代码或为代码添加多行描述的时候使用<br style=\"outline: 0px; overflow-wrap: break-word;\">文档注释：生产java帮助文档的时候使用，开发中常用来描述类、描述方法</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.11. 请说出Java中数据类型的分类?基本数据类型都有哪些?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：<br style=\"outline: 0px; overflow-wrap: break-word;\">基本数据类型<br style=\"outline: 0px; overflow-wrap: break-word;\">byte、short、int、long、float、double、char、boolean<br style=\"outline: 0px; overflow-wrap: break-word;\">引用数据类型<br style=\"outline: 0px; overflow-wrap: break-word;\">数组、类、接口</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.12. 变量是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：变量，在程序运行时，值可以被修改的量。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.13. 变量的定义格式是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：数据类型 变量名 = 变量值 ;</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.14. Java中数据的类型转换有几种?分别是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：强制类型转换：容量大的类型向容量小的类型转换时使用<br style=\"outline: 0px; overflow-wrap: break-word;\">隐式类型转换：容器小的类型向容量大的类型转换时使用</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.15. Java语言中的字符char可以存储一个中文汉字吗?为什么呢?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中可以存储汉字。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.16. 请说明 &amp;&amp; 和 &amp; 的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与(and)，当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br style=\"outline: 0px; overflow-wrap: break-word;\">&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式<br style=\"outline: 0px; overflow-wrap: break-word;\">&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.17. 请说明 == 与 = 的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：==： 比较运算符，用来比较操作符两边的变量的值是否相等。<br style=\"outline: 0px; overflow-wrap: break-word;\">= ： 赋值运算符，把操作符右边的值，赋值给左边的变量</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.18. 三元运算符的基本格式是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 三元运算符的格式是: 条件表达式 ? 表达式1 : 表达式2 ;</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.19. 三元运算符的执行流程是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 三元运算符的执行流程: 首先计算条件表达式的值看其返回结果是true还是false,如果是true就执行表达式1,如果是false就执行表达式2</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.20. 使用键盘录入数据的三个步骤是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 第一步导包:格式: import java.util.Scanner ;位置: 在class上边<br style=\"outline: 0px; overflow-wrap: break-word;\">第二步创建Scanner对象，格式: Scanner sc = new Scanner(System.in) ;<br style=\"outline: 0px; overflow-wrap: break-word;\">第三步获取键盘录入数据:格式: int x = sc.nextInt() ;</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.21. 请说明for、while、do…while三种循环的格式以及执行流程，以及它们的区别。</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：for循环语句格式：<br style=\"outline: 0px; overflow-wrap: break-word;\">for(初始化语句;判断条件语句;控制条件语句) {<br style=\"outline: 0px; overflow-wrap: break-word;\">循环体语句;&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">}<br style=\"outline: 0px; overflow-wrap: break-word;\">执行流程：<br style=\"outline: 0px; overflow-wrap: break-word;\">a) 执行初始化语句<br style=\"outline: 0px; overflow-wrap: break-word;\">b) 执行判断条件语句，看其结果是true还是false，如果是false，循环结束；如果是true，继续执行。<br style=\"outline: 0px; overflow-wrap: break-word;\">c) 执行循环体语句<br style=\"outline: 0px; overflow-wrap: break-word;\">d) 执行控制条件语句<br style=\"outline: 0px; overflow-wrap: break-word;\">e) 回到b继续</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">while循环语句格式：<br style=\"outline: 0px; overflow-wrap: break-word;\">while(判断条件语句) {<br style=\"outline: 0px; overflow-wrap: break-word;\">循环体语句;<br style=\"outline: 0px; overflow-wrap: break-word;\">}<br style=\"outline: 0px; overflow-wrap: break-word;\">执行流程：<br style=\"outline: 0px; overflow-wrap: break-word;\">a) 执行判断条件语句，看其结果是true还是false<br style=\"outline: 0px; overflow-wrap: break-word;\">如果是false，循环结束。<br style=\"outline: 0px; overflow-wrap: break-word;\">如果是true，继续执行。<br style=\"outline: 0px; overflow-wrap: break-word;\">b) 执行循环体语句<br style=\"outline: 0px; overflow-wrap: break-word;\">c) 回到a继续</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">do…while循环语句格式：<br style=\"outline: 0px; overflow-wrap: break-word;\">do {<br style=\"outline: 0px; overflow-wrap: break-word;\">循环体语句;<br style=\"outline: 0px; overflow-wrap: break-word;\">}while((判断条件语句);<br style=\"outline: 0px; overflow-wrap: break-word;\">执行流程：<br style=\"outline: 0px; overflow-wrap: break-word;\">a) 执行循环体语句<br style=\"outline: 0px; overflow-wrap: break-word;\">b) 执行判断条件语句，看其结果是true还是false，如果是false，循环结束；如果是true，继续执行。<br style=\"outline: 0px; overflow-wrap: break-word;\">c) 回到a继续</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\">三种循环语句的区别：<br style=\"outline: 0px; overflow-wrap: break-word;\">a) do…while循环至少会执行一次循环体<br style=\"outline: 0px; overflow-wrap: break-word;\">b) for循环和while循环只有在条件成立的时候才会去执行循环体<br style=\"outline: 0px; overflow-wrap: break-word;\">注意：写程序优先考虑for循环，再考虑while循环，最后考虑do…while循环</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.22. 定义一个方法的格式是什么,以及方法的注意事项?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：修饰符 返回值类型 方法名(参数类型 参数名1, 参数类型 参数名2 ….){<br style=\"outline: 0px; overflow-wrap: break-word;\">方法体 ;<br style=\"outline: 0px; overflow-wrap: break-word;\">return 返回值 ;<br style=\"outline: 0px; overflow-wrap: break-word;\">}<br style=\"outline: 0px; overflow-wrap: break-word;\">注意事项:<br style=\"outline: 0px; overflow-wrap: break-word;\">A: 方法不调用不执行<br style=\"outline: 0px; overflow-wrap: break-word;\">B: 方法与方法是平级关系，不能嵌套定义<br style=\"outline: 0px; overflow-wrap: break-word;\">C: 方法定义的时候参数之间用逗号隔开<br style=\"outline: 0px; overflow-wrap: break-word;\">D: 方法调用的时候不用在传递数据类型<br style=\"outline: 0px; overflow-wrap: break-word;\">E: 如果方法有明确的返回值，一定要有return带回一个值</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.23. 请解释什么是方法的重载?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：方法重载指在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<br style=\"outline: 0px; overflow-wrap: break-word;\">方法重载特点：&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">a) 与返回值类型无关，只看方法名和参数列表<br style=\"outline: 0px; overflow-wrap: break-word;\">b) 在调用时，虚拟机通过参数列表的不同来区分同名方法</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">1.24. 数组有几种创建的方式？分别是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：2种。动态创建和静态创建。</p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t1\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"2__156\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>2. 面向对象</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.1. 类是什么？ 对象是什么？举例说明</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:类是一组相关属性和行为的集合是一个抽象的东西,对象则是该类的一个具体的体现。<br style=\"outline: 0px; overflow-wrap: break-word;\">举例: 学生就是一个类,然后每一个学生都是学生的一个个具体的体现,所以每一个学生就是一个学生。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.2. 类由哪些内容组成？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:类由成员变量和成员方法组成<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量对应的就是事物的属性(就是事物固有的信息,比如: 人的属性有身高 , 姓名 , 年龄 , 学历…) , 成员方法对应的是行为(行为: 就是该事物可以做的事情,比如:人的行为有: 吃饭,睡觉…)</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.3. 成员变量与局部变量的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：<br style=\"outline: 0px; overflow-wrap: break-word;\">A:在类中的位置不同<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：在类中方法外<br style=\"outline: 0px; overflow-wrap: break-word;\">局部变量：在方法定义中或者方法声明上<br style=\"outline: 0px; overflow-wrap: break-word;\">B:在内存中的位置不同<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：在堆内存<br style=\"outline: 0px; overflow-wrap: break-word;\">局部变量：在栈内存<br style=\"outline: 0px; overflow-wrap: break-word;\">C:生命周期不同<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：随着对象的创建而存在，随着对象的消失而消失<br style=\"outline: 0px; overflow-wrap: break-word;\">局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br style=\"outline: 0px; overflow-wrap: break-word;\">D:初始化值不同<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：有默认初始化值<br style=\"outline: 0px; overflow-wrap: break-word;\">局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.4. 什么是匿名对象？什么时候使用匿名对象？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：匿名对象指：没有起名字的对象<br style=\"outline: 0px; overflow-wrap: break-word;\">使用匿名对象:<br style=\"outline: 0px; overflow-wrap: break-word;\">a:调用方法，仅仅只调用一次的时候<br style=\"outline: 0px; overflow-wrap: break-word;\">b:匿名对象可以作为实际参数传递</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.5. 使用面向对象【封装】的好处有哪些？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：隐藏实现细节，提供公共的访问方式；<br style=\"outline: 0px; overflow-wrap: break-word;\">提高了代码的复用性；<br style=\"outline: 0px; overflow-wrap: break-word;\">提高安全性。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.6. private 关键字在哪里使用？ 被 private 修饰的成员有什么特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：类中的成员需要私有的时候使用private关键字<br style=\"outline: 0px; overflow-wrap: break-word;\">特点：<br style=\"outline: 0px; overflow-wrap: break-word;\">是一个权限修饰符。<br style=\"outline: 0px; overflow-wrap: break-word;\">可以修饰成员(成员变量和成员方法)<br style=\"outline: 0px; overflow-wrap: break-word;\">被private修饰的成员只在本类中才能访问</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.7. 为什么要有 this 关键字？this 关键字的含义？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：this用来解决成员变量与局部变量重名问题<br style=\"outline: 0px; overflow-wrap: break-word;\">this关键字代表的是本类对象引用；谁调用我,this就代表谁.</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.8. 构造方法的作用是什么？构造方法的特点是什么？构造方法的注意事项？ 构造方法中可不可以写return 语句呢？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：构造方法的作用是用于给类的成员变量赋值,完成类的初始化工作<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法的特点:<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法的名称和类名相同<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法没有返回值类型,连void也没有<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法没有具体的返回值<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法的注意事项:<br style=\"outline: 0px; overflow-wrap: break-word;\">a: 如果一个类没有给出构造方法,系统将会提供一个默认无参的构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">b: 如果我们给出类构造方法,系统将不会提供默认无参的构造方法,这个时候如果我们还想使用无参的构造方法来创建对象,那么就需要我们给出无参的构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">可以写空的return语句.</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.9. 一个类的缺省构造方法可以有参数吗？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 一个类的缺省构造方法没有参数</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.10. 静态变量与成员变量的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：1:所属不同<br style=\"outline: 0px; overflow-wrap: break-word;\">静态变量属于类，所以也称为为类变量<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量属于对象，所以也称为实例变量(对象变量)<br style=\"outline: 0px; overflow-wrap: break-word;\">2:内存中位置不同<br style=\"outline: 0px; overflow-wrap: break-word;\">静态变量存储于方法区的静态区<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量存储于堆内存<br style=\"outline: 0px; overflow-wrap: break-word;\">3:内存出现时间不同<br style=\"outline: 0px; overflow-wrap: break-word;\">静态变量随着类的加载而加载，随着类的消失而消失<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量随着对象的创建而存在，随着对象的消失而消失<br style=\"outline: 0px; overflow-wrap: break-word;\">4:调用不同<br style=\"outline: 0px; overflow-wrap: break-word;\">静态变量可以通过类名调用，也可以通过对象调用<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量只能通过对象名调用</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.11. 请说明一个对象的创建过程做了哪些事情？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Student s = new Student();<br style=\"outline: 0px; overflow-wrap: break-word;\">1：将Student.class 字节码文件加载到内存<br style=\"outline: 0px; overflow-wrap: break-word;\">2: 在栈内存中，开辟一个空间存储 s变量，用来记录Student对象的引用<br style=\"outline: 0px; overflow-wrap: break-word;\">3: 在堆内存中，开辟一个空间存储 new Student()对象的成员信息<br style=\"outline: 0px; overflow-wrap: break-word;\">2：加载类中静态成员<br style=\"outline: 0px; overflow-wrap: break-word;\">3：执行类中静态代码块<br style=\"outline: 0px; overflow-wrap: break-word;\">4：加载对象中普通成员<br style=\"outline: 0px; overflow-wrap: break-word;\">5：执行构造代码块<br style=\"outline: 0px; overflow-wrap: break-word;\">6：执行构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">7：将new Student()的地址赋值给 s 变量</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.12. 继承的好处是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: A: 提高了代码的维护型<br style=\"outline: 0px; overflow-wrap: break-word;\">B: 提供了代码的复用性<br style=\"outline: 0px; overflow-wrap: break-word;\">C: 让类与类之间产生了关系, 是多态的前提</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.13. Java 中的类的继承特点是什么以及继承的注意事项？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：继承的特点: 在java语言中类的继承只支持单继承,不支持多继承.但是可以多层继承。<br style=\"outline: 0px; overflow-wrap: break-word;\">继承的注意事项:<br style=\"outline: 0px; overflow-wrap: break-word;\">A: 子类只能继承父类非私有的成员&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">B: 子类不能继承父类的构造方法,但是可以通过super去访问父类的构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">C: 不要为了某个功能去使用继承</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.14. this 和 super 分别是什么，他们各自的应用场景是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：this代表的是本类对象的引用 , 谁调用我这个方法,这个方法里边的this就代表谁。一般的使用场景是,当局部变量隐藏了成员变量的时候,我们可以使用this去明确指定要访问的是成员变量<br style=\"outline: 0px; overflow-wrap: break-word;\">super代表的是父类存储空间的一个标志(可以理解为父类对象的引用),我们可以使用super来访问父类的成员</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.15. 什么是方法重写？需要注意哪些问题？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：方法重写：指子类中出现了和父类中一模一样的方法声明，也被称为方法覆盖，方法复写<br style=\"outline: 0px; overflow-wrap: break-word;\">需要注意的问题：<br style=\"outline: 0px; overflow-wrap: break-word;\">父类中私有方法不能被重写<br style=\"outline: 0px; overflow-wrap: break-word;\">子类重写父类方法时，访问权限不能更低<br style=\"outline: 0px; overflow-wrap: break-word;\">父类静态方法，子类也必须通过静态方法进行重写。（其实这个算不上方法重写，但是现象确实如此）</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.16. 方法重写和重载有什么区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：重载Overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同(即参数个数或类型不同),与返回值类型无关。<br style=\"outline: 0px; overflow-wrap: break-word;\">重写Override是发生在子父类中的一个现象, 子类中出现了和父类中一模一样的方法,与返回值有关.</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.17. 子父类中构造方法的执行有什么特点？为什么要这样？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：1、子类有所有的构造方法默认都会访问父类中空参数的构造方法。<br style=\"outline: 0px; overflow-wrap: break-word;\">因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。每一个构造方法的第一条语句默认都是：super()<br style=\"outline: 0px; overflow-wrap: break-word;\">2、如果父类中没有空参数的构造方法，通过下列方式解决<br style=\"outline: 0px; overflow-wrap: break-word;\">a) 子类通过super去显示调用父类其他的带参的构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">b) 子类通过this去调用本类的其他构造方法(本类其他构造也必须首先可以访问了父类构造)<br style=\"outline: 0px; overflow-wrap: break-word;\">注意：super(…)或者this(…)必须出现在第一条语句上，否则，就会有父类数据的多次初始化</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.18. 静态代码块，构造代码块，构造方法的执行顺序是什么以及执行特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：A: 先执行所有的静态代码块，再执行所有的构造代码块，最后执行构造方法<br style=\"outline: 0px; overflow-wrap: break-word;\">B: 静态代码块只执行一次, 构造代码块和构造方法,每创建一次对象就执行一次</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.19. final 关键字是什么意思，可以修饰那些成员？被修饰的成员有哪些特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：final最终的意思。<br style=\"outline: 0px; overflow-wrap: break-word;\">final可以修饰类,成员变量,成员方法<br style=\"outline: 0px; overflow-wrap: break-word;\">final修饰类，此类不能被继承。<br style=\"outline: 0px; overflow-wrap: break-word;\">final修饰变量，变量就成了常量，只能被赋值一次<br style=\"outline: 0px; overflow-wrap: break-word;\">final修饰方法，方法不能被重写</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.20. 什么是多态,多态的前提是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：一种事物在不同时刻表现出来的状态就是多态<br style=\"outline: 0px; overflow-wrap: break-word;\">多态的前提:<br style=\"outline: 0px; overflow-wrap: break-word;\">a: 需要有继承<br style=\"outline: 0px; overflow-wrap: break-word;\">b: 需要有方法重写(其实没有也是可以的,但是没有意义)，不同状态的表现就是就是靠方法重写体现的<br style=\"outline: 0px; overflow-wrap: break-word;\">c: 需要有父类的引用指向子类对象：Fu f = new 子类();</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.21. 多态中成员(成员变量,成员方法,静态成员方法)的访问特点是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 访问成员变量: 编译看左边 , 运行看左边 (因为成员变量其实就是属性,属性就是只该事物的描述信息,所以使用父类在访问的时候,访问的就是父类的成员变量)<br style=\"outline: 0px; overflow-wrap: break-word;\">成员方法:编译看左边,运行看右边(这个是多态的本质,存在动态绑定的机制)<br style=\"outline: 0px; overflow-wrap: break-word;\">静态成员方法: 编译看左边,运行看左边 (所以说静态算不上重写)</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.22. 多态的好处?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: A:提供了代码的维护性(通过继承保证)<br style=\"outline: 0px; overflow-wrap: break-word;\">B:提供了代码的扩展性(通过多态保证),这个特点也体现了多态的最常见的应用,作为参数传递.</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.23. 多态的弊端是什么,如果我们想访问子类的特有的功能我们应该怎么办?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 多态的弊端,不能访问子类中特有的功能<br style=\"outline: 0px; overflow-wrap: break-word;\">如果我们还想使用子类中特有的功能,我们需要使用向下转型(向下转型: 就是将父类的引用强制转换成子类的引用,在向下转型的过程中需要注意一个异常: ClassCastException)</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.24. 抽象类是什么,抽象类的特点?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：使用了关键字abstract声明的类叫做“抽象类”。如果一个类里包含了一个或多个抽象方法，类就必须指定成abstract（抽象）。“抽象方法”，属于一种不完整的方法，只含有一个声明，没有方法主体。<br style=\"outline: 0px; overflow-wrap: break-word;\">抽象类的特点:<br style=\"outline: 0px; overflow-wrap: break-word;\">A: 抽象类的定义格式: abstract class 类名{}<br style=\"outline: 0px; overflow-wrap: break-word;\">抽象方法的定义格式: public abstract 返回值类型 方法名();<br style=\"outline: 0px; overflow-wrap: break-word;\">B:抽象类中可以存在抽象方法,也可以存在非抽象方法<br style=\"outline: 0px; overflow-wrap: break-word;\">C:抽象类不能直接进行实例化,我们可以使用多态的形式进行进行间接实例化<br style=\"outline: 0px; overflow-wrap: break-word;\">D:抽象类的子类<br style=\"outline: 0px; overflow-wrap: break-word;\">可以是抽象类(没有意思,如果子类还是抽象类,那么我们还是不能进行实例化，还需要一个子类去继承)，也可以是非抽象类(存在一个前提: 子类必须重写父类的抽象方法)</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.25. 抽象类中有没有构造方法,如果有它是用来做什么的?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 抽象类虽然不能进行实例化,但是抽象类中是存在构造方法,该构造方法的作用是用于子类访问父类数据是的初始化.</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.26. 接口中成员变量的特点,以及成员方法的特点?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：接口中的成员变量都是常量,存在默认的访问修饰符:public static final<br style=\"outline: 0px; overflow-wrap: break-word;\">接口中的成员方法的特点: 都是抽象方法,存在默认的访问修饰符: public abstract</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.27. 请说出类与类,类与接口,以及接口与接口的关系以及特点?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:类与类是继承的关系,只支持单继承,可以是多层继承。<br style=\"outline: 0px; overflow-wrap: break-word;\">类与接口是实现的关系,可以是多实现<br style=\"outline: 0px; overflow-wrap: break-word;\">一个类可以继承一个类的同时,还可以实现多个接口<br style=\"outline: 0px; overflow-wrap: break-word;\">接口与接口是继承的关系,可以是单继承也可以是多继承</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.28. 抽象类和接口的区别?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：A:成员区别<br style=\"outline: 0px; overflow-wrap: break-word;\">抽象类：<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：可以变量，也可以常量<br style=\"outline: 0px; overflow-wrap: break-word;\">构造方法：有<br style=\"outline: 0px; overflow-wrap: break-word;\">成员方法：可以抽象，也可以非抽象<br style=\"outline: 0px; overflow-wrap: break-word;\">接口：<br style=\"outline: 0px; overflow-wrap: break-word;\">成员变量：只可以常量<br style=\"outline: 0px; overflow-wrap: break-word;\">成员方法：只可以抽象&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">B:关系区别<br style=\"outline: 0px; overflow-wrap: break-word;\">类与类<br style=\"outline: 0px; overflow-wrap: break-word;\">继承，单继承<br style=\"outline: 0px; overflow-wrap: break-word;\">类与接口<br style=\"outline: 0px; overflow-wrap: break-word;\">实现，单实现，多实现<br style=\"outline: 0px; overflow-wrap: break-word;\">接口与接口<br style=\"outline: 0px; overflow-wrap: break-word;\">继承，单继承，多继承&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">C:设计理念区别<br style=\"outline: 0px; overflow-wrap: break-word;\">抽象类 被继承体现的是：”is a”的关系。 抽象类中定义的是该继承体系的共性功能。<br style=\"outline: 0px; overflow-wrap: break-word;\">接口 被实现体现的是：”like a”的关系。 接口中定义的是该继承体系的扩展功能。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\"><span style=\"outline: 0px; overflow-wrap: break-word;\">2.29. 形式参数是基本类型要的是什么?是类名要的是什么?是抽象类名要的是什么?是接口名要的是什么?</span></span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 形式参数是基本类型要的是一个基本类型的变量或者具体的常量值<br style=\"outline: 0px; overflow-wrap: break-word;\">是类名的时候要的是一个该类的对象<br style=\"outline: 0px; overflow-wrap: break-word;\">是抽象类名的时候的要的是一个继承自该类的一个子类对象<br style=\"outline: 0px; overflow-wrap: break-word;\">是接口的时候要的是一个实现了该接口的子类对象</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.30. 返回值类型是基本类型返回的是什么?是类名返回的是什么?是抽象类名返回的是什么?是接口名返回的是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案:返回值是基本数据类型的时候返回的是一个具体的值<br style=\"outline: 0px; overflow-wrap: break-word;\">是类名的时候,本质上返回的是一个该类对应的子类对象<br style=\"outline: 0px; overflow-wrap: break-word;\">是抽象类名的时候返回的应该是一个继承自该类的子类对象<br style=\"outline: 0px; overflow-wrap: break-word;\">是接口名的时候返回的是一个实现了该接口的子类对象</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.31. package它有什么作用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：package，包的意思，其实就是文件夹，它可以对类进行分类管理</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.32. import的作用?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：在不同包下的类之间相互访问的时候，发现，每次使用不同包下的类的时候，都需要加包的全路径。比较麻烦，这个时候，java就提供了( import )导包的功能。使用import可以将包中的类导入进来，以后使用类的时候，不需导包，直接使用，简化了书写。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.33. 内部类有哪些访问特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：1. 内部类可以直接访问外部类的成员，包括私有<br style=\"outline: 0px; overflow-wrap: break-word;\">2. 外部类要访问内部类的成员，必须先创建内部类对象</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">2.34. 匿名内部类的格式是什么?其本质是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案: 匿名内部类的格式:<br style=\"outline: 0px; overflow-wrap: break-word;\">new 类名或者接口名() {<br style=\"outline: 0px; overflow-wrap: break-word;\">方法重写 ;<br style=\"outline: 0px; overflow-wrap: break-word;\">} ;<br style=\"outline: 0px; overflow-wrap: break-word;\">本质: 匿名内部类本质是一个继承了某一个类或者实现了某一个接口的子类对象</p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t2\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t2\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"3_API_380\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>3. 常用API</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.1. 请解释 ==与equals()方法的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：== 号比较基本数据类型比较的是值,比较引用数据类型比较的是地址值<br style=\"outline: 0px; overflow-wrap: break-word;\">equals方法只能比较引用数据类型,默认比较的是地址值,如果我们想要建立自己的比较方式,我们就需要复写equals方法</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.2. 下面这条语句一共创建了多少个对象:String s = “a”+“b”+”c”; 分别都是什么？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：5个对象，分别是 “a” , “b” , “c” , “ab” , “abc”，因为字符串的特点是一旦被创建就不能被改变,所有在使用常量进行相加的时候,都是在创建新的字符串对象，最后在把字符串\"abc\"这个常量值赋值给引用变量s</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.3. 如何实现StringBuffer和String的相互转换？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：StringBuffer 转换到 String的方式：</p><ol style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过String类的构造方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过StringBuffer类中的toString()方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过StringBuffer类中的substring()方法 (注：不常用)<br style=\"outline: 0px; overflow-wrap: break-word;\">String 转换到 StringBuffer的方式：</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过StringBuffer类的构造方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过StringBuffer类的append()、insert()方法</li></ol><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.4. 如何实现String和int数据的相互转换</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：String 转换到 int的方式：</p><ol style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">String – Integer – int通过Integer类的intValue()方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过Integer类的parseInt(String s)方法<br style=\"outline: 0px; overflow-wrap: break-word;\">Int 转换到 String的方式：</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">Int – Integer – String Integer的toSting()</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过String类的valueOf()方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过Integer类的toSting(int i)方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过与字符串\"\"相连接</li></ol><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.5. 如何实现 基本数据类型 与 基本数据封装类 之间的相互转换</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：基本数据类型 转换到 包装类的方式：</p><ol style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过包装类的构造方法</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过包装类的静态方法valueOf()<br style=\"outline: 0px; overflow-wrap: break-word;\">包装类 转换到 基本数据类型的方式：</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过包装类的方法xxxValue()</li></ol><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.6. 请说明String与StringBuffer二者之间的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Java平台提供了两个类：String和StringBuffer，他们可以存储和操作字符串，即包含多个字符的字符数据。String类表示内容不可以改变的字符串；而StringBuffer类表示内容可以被修改的字符串。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.7. 请说明StringBuffer与StringBilder二者之间的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：StringBuffer和StringBuilder类都表示内容可以被修改的字符串，StringBilder是线程不安全的，运行效率高，如果一个字符串变量是在方法里面定义，这种情况只可能有一个线程访问它，不存在不安全的因素了，则用StringBuilder。如果要在类里面定义成员变量，并且这个类的实例对象会在多线程环境下使用，那么最好用StringBuffer。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.8. 什么是正则表达式？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则达表示通常被用来检索、替换那些符合某个模式的文本。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.9. 如何实现Date与long相互转换?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Date 转换到 long 的方式：通过Date类的getTime()方法<br style=\"outline: 0px; overflow-wrap: break-word;\">long 转换到 Date的方式：通过Date类的构造方法</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">3.10. 如何实现Date与String相互转换？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Date 转换到 String的方式：<br style=\"outline: 0px; overflow-wrap: break-word;\">1.Date类的toString()方法<br style=\"outline: 0px; overflow-wrap: break-word;\">2.DateFormat类的format()方法<br style=\"outline: 0px; overflow-wrap: break-word;\">String 转换到 Date的方式：<br style=\"outline: 0px; overflow-wrap: break-word;\">1.Date类的构造方法(已过时，被DateFormat类的parse(String s)方法取代)<br style=\"outline: 0px; overflow-wrap: break-word;\">2.DateFormat类的parse()方法</p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t3\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t3\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"4__435\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>4. 集合框架</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.1. 请简述集合和数组的异同点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：集合：<br style=\"outline: 0px; overflow-wrap: break-word;\">可以存储不同类型的元素(通常使用存储一种类型元素)<br style=\"outline: 0px; overflow-wrap: break-word;\">集合的长度可以改变<br style=\"outline: 0px; overflow-wrap: break-word;\">数组：<br style=\"outline: 0px; overflow-wrap: break-word;\">必须存储相同一类型的元素<br style=\"outline: 0px; overflow-wrap: break-word;\">数组的长度固定</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.2. 请简述迭代器是一个什么玩意？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：迭代器就是对容器中的元素进行遍历，每次取出一个元素，然后对元素进行操作。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.3. 请简述常见的数据结构有哪些？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：线性表、链表、栈、队列、树、哈希表</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.4. 请简述ArrayList、Vector、LinkedList三者的特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：ArrayList：底层数组结构；线程不同步，效率高；元素查找快、增删慢；<br style=\"outline: 0px; overflow-wrap: break-word;\">Vector：底层数组结构；线程同步，安全；元素查找快、增删慢；<br style=\"outline: 0px; overflow-wrap: break-word;\">LinkedList：底层链表结构，线程不同步，效率高；元素增删快、查找慢</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.5. 请简述ArrayList、Vector、LinkedList，分别在什么时候使用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：程序是否要考虑线程安全？<br style=\"outline: 0px; overflow-wrap: break-word;\">是： Vector<br style=\"outline: 0px; overflow-wrap: break-word;\">否： 查找操作多还是增删操作多？<br style=\"outline: 0px; overflow-wrap: break-word;\">查找多：ArrayList<br style=\"outline: 0px; overflow-wrap: break-word;\">增删多：LinkedList</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.6. 请简述并发修改异常产生的原因？如何解决？</span>&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">答案：ConcurrentModificationException并发修改异常，在迭代器迭代的过程中，集合中的元素个数发生了改变，此时导致并发修改异常。<br style=\"outline: 0px; overflow-wrap: break-word;\">解决方式：</p><ol style=\"outline: 0px; margin-top: 0px; margin-bottom: 24px; margin-left: 0px; list-style: none; font-size: 18px; overflow-wrap: break-word;\"><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过列表迭代器自带的方法完成元素增删操作。</li><li style=\"outline: 0px; margin-top: 8px; margin-left: 40px; list-style-type: decimal; overflow-wrap: break-word;\">通过for循环遍历集合，使用集合中的方法完成元素增删操作。</li></ol><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.7. 请简述泛型是什么?有什么用?在哪里用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：泛型是一种特殊的类型，它把指定类型的工作推迟到客户端代码声明并实例化类或方法的使用进行。也被称为参数化类型，可以把类型当做参数一样传递过来，在传递过来之前我不明确，但是在使用的时候就就明确了。<br style=\"outline: 0px; overflow-wrap: break-word;\">泛型的好处：<br style=\"outline: 0px; overflow-wrap: break-word;\">1.提高了程序的安全性<br style=\"outline: 0px; overflow-wrap: break-word;\">2.将运行期遇到的问题转移到了编译期<br style=\"outline: 0px; overflow-wrap: break-word;\">3.省去了类型强转的麻烦<br style=\"outline: 0px; overflow-wrap: break-word;\">泛型的常见应用：<br style=\"outline: 0px; overflow-wrap: break-word;\">1.泛型类<br style=\"outline: 0px; overflow-wrap: break-word;\">2.泛型方法<br style=\"outline: 0px; overflow-wrap: break-word;\">3.泛型接口</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.8. 请简述List&lt;? extends T&gt;和List&lt;? super T&gt;之间有什么区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：List&lt;? extends T&gt; ：向下限制<br style=\"outline: 0px; overflow-wrap: break-word;\">List&lt;? super T&gt; ：向上限制<br style=\"outline: 0px; overflow-wrap: break-word;\">? extends T ： 代表接收的泛型类型为T类型或T子类类型<br style=\"outline: 0px; overflow-wrap: break-word;\">? super T ：代表接收的泛型类型为T类型或T父类类型</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.9. 如何编写一个泛型方法，让它能够接受泛型参数并返回泛型类型？并举例</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：泛型方法，指把泛型定义在方法上，使用泛型类型来替代原始类型<br style=\"outline: 0px; overflow-wrap: break-word;\">public static T[] sort(T[] t){<br style=\"outline: 0px; overflow-wrap: break-word;\">Arrays.sort(t);<br style=\"outline: 0px; overflow-wrap: break-word;\">return t;<br style=\"outline: 0px; overflow-wrap: break-word;\">}</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.10. 请简述Java中如何使用泛型编写带有参数的类？并举例</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：泛型类，指把泛型定义在类上，使用泛型类型来替代原始类型<br style=\"outline: 0px; overflow-wrap: break-word;\">class GenericClass {<br style=\"outline: 0px; overflow-wrap: break-word;\">private T t;<br style=\"outline: 0px; overflow-wrap: break-word;\">public void setT(T t) {<br style=\"outline: 0px; overflow-wrap: break-word;\">this.t = t;<br style=\"outline: 0px; overflow-wrap: break-word;\">}<br style=\"outline: 0px; overflow-wrap: break-word;\">public T getT() {<br style=\"outline: 0px; overflow-wrap: break-word;\">return t;<br style=\"outline: 0px; overflow-wrap: break-word;\">}<br style=\"outline: 0px; overflow-wrap: break-word;\">}</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.11. 请简述Set集合的特点？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Set集合中不能存储重复元素；<br style=\"outline: 0px; overflow-wrap: break-word;\">Set集合中的元素是按照某种排序规则存储的</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.12. 请简述HashSet是如何保证元素唯一性的?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：HashSet集合中存储的元素，通过重写hashCode() 与 equals()方法来保证元素唯一性</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.13. 请简述TreeSet是如何保证元素唯一性与排序的？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：TreeSet集合中保证元素唯一性与排序有两种方式：<br style=\"outline: 0px; overflow-wrap: break-word;\">方式1：实现自然排序接口 Comparable，重写 compareTo(T t)方法<br style=\"outline: 0px; overflow-wrap: break-word;\">方式2：实现比较器排序接口 Comparator，重写 compare(T t1, T t2)方法</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.14. 请说明Map接口和Collection接口的区别</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Map接口是双列集合顶层接口，每个位置存储一对元素(key, value)<br style=\"outline: 0px; overflow-wrap: break-word;\">Collection接口是单列集合顶层接口，每个位置存储一个元素</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.15. 请说出Map集合的遍历方式</span>&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Map集合遍历方式有两种：<br style=\"outline: 0px; overflow-wrap: break-word;\">方式一： 键找值<br style=\"outline: 0px; overflow-wrap: break-word;\">方式二： 键值对对象，找键，找值</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.16. 请说明HashMap和Hashtable的区别</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：HashMap：线程不同步，效率高；可以存储null键null值<br style=\"outline: 0px; overflow-wrap: break-word;\">Hashtable：线程同步，数据安全；不可以存储null键null值</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">4.17. 请解释Collection与Collections的区别</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Collection:单列集合的顶层接口，包含集合中常用的方法。<br style=\"outline: 0px; overflow-wrap: break-word;\">Collections:集合工具类，包含获取集合最大元素值、集合排序等方法。</p><h2 style=\"outline: 0px; margin-top: 8px; margin-bottom: 16px; font-weight: 700; font-family: &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, SimHei, Arial, SimSun; font-size: 24px; color: rgb(79, 79, 79); line-height: 32px; overflow-wrap: break-word;\"><a name=\"t4\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a name=\"t4\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a><a id=\"5_IO_533\" style=\"outline: none; font-weight: normal; cursor: pointer; background-color: transparent; color: rgb(78, 161, 219); overflow-wrap: break-word;\"></a>5. IO流</h2><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.1. 请说说什么是异常？异常的分类？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：Java异常是java提供的用于处理程序中错误的一种机制。<br style=\"outline: 0px; overflow-wrap: break-word;\">所谓错误是指在程序运行的过程中发生的一些异常事件（如：除0错误，数组下标越界，所要读取的文件不存在）。设计良好地程序应该在程序异常发生时提供处理这些错误的方法，使得程序不会因为异常的发送而阻断或产生不可预见的结果。<br style=\"outline: 0px; overflow-wrap: break-word;\">Java程序的执行过程中如出现异常事件，可以生成一个异常类对象，该异常对象封装了异常事件的信息，并将被提交给java运行时系统，这个过程称为抛出异常。<br style=\"outline: 0px; overflow-wrap: break-word;\">当java运行时系统接收到异常对象时，会寻找能处理这一异常的代码并把当前异常对象交其处理，这一过程称为捕获异常。<br style=\"outline: 0px; overflow-wrap: break-word;\">异常的分类：<br style=\"outline: 0px; overflow-wrap: break-word;\">Error：称为错误，由java虚拟机生成并抛出，包括动态链接失败，虚拟机错误等，程序对其不做处理。<br style=\"outline: 0px; overflow-wrap: break-word;\">Exception：所有异常类的父类，其子类对应了各种各样的可能出现的异常事件，一般需要用户显示的声明或捕获。<br style=\"outline: 0px; overflow-wrap: break-word;\">Runtime Exception:一类特殊的异常，如被0除、数组下标超范围等，其产生比较频繁，处理麻烦，如果显示的声明或捕获将会对程序可读性和运行效率影响很大。因此由系统自动检测并将它们交给缺省的异常处理程序（用户可不必对其处理）。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.2. 请说出异常处理的两种方式？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：捕获异常： try…catch…finally<br style=\"outline: 0px; overflow-wrap: break-word;\">抛出异常：throw \\ throws（）<br style=\"outline: 0px; overflow-wrap: break-word;\">其实异常部分主要讲的就是五个关键字：try、catch、finally、throw、throws<br style=\"outline: 0px; overflow-wrap: break-word;\">try语句：<br style=\"outline: 0px; overflow-wrap: break-word;\">try{…}语句制定了一段代码，这段代码就是一次捕获并处理异常的范围。在执行过程中，这段代码可能会产生并抛出一种或几种类型的异常对象，它后面的catch语句要分别对这些异常做相应的处理。如果没有异常发生，所有的catch代码段都被略过不执行。<br style=\"outline: 0px; overflow-wrap: break-word;\">catch语句&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">在catch语句块中是对异常进行处理的代码，每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。在catch中声明的异常对象（catch(XxxException e)）封装了异常事件发生的信息，在catch语句块中可以使用这个对象的一些方法获取这些信息。<br style=\"outline: 0px; overflow-wrap: break-word;\">finally语句：<br style=\"outline: 0px; overflow-wrap: break-word;\">finally语句为异常处理提供一个统一的出口，使得在控制流程转到程序的其他部分以前，能够对程序的状态做统一的管理。无论try所指定的程序块中是否抛出异常，finally所指定的代码都要执行。通常在finally语句中可以进行资源的清除工作。<br style=\"outline: 0px; overflow-wrap: break-word;\">throws关键字通常被应用在声明方法时，用来指定可能抛出的异常。多个异常可以使用逗号隔开。当在主函数中调用该方法时，如果发生异常，就会将异常抛给指定异常对象。<br style=\"outline: 0px; overflow-wrap: break-word;\">throw关键字通常用在方法体中，并且抛出一个异常对象。程序在执行到throw语句时立即停止，它后面的语句都不执行。通常throw抛出异常后，如果想在上一级代码中捕获并处理异常，则需要在抛出异常的方法中使用throws关键字在方法声明中指定要抛出的异常；如果要捕获throw抛出的异常，则必须使用try{}catch{}语句。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.3. 请说说编译期异常和运行期异常的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：编译时异常：程序正确，但因为外在的环境条件不满足引发。对商用软件系统，程序开发者必须考虑并处理这类异常。Java编译器强制要求处理这类异常，如果不捕获这类异常，程序将不能被编译。<br style=\"outline: 0px; overflow-wrap: break-word;\">运行期异常：这意味着程序存在bug，如数组越界，0被除，传入参数不满足规则等，这类异常需要更改程序来避免，java编译器强制要求处理这类异常。<br style=\"outline: 0px; overflow-wrap: break-word;\">错误：一般很少见，也很难通过程序解决。它可能源于程序的bug，但一般更可能源于环境问题，如内存耗尽。错误在程序中无须处理，而由运行环境处理。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.4. 请说说throws与throw的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：throws关键字通常被应用在声明方法时，用来指定可能抛出的异常。多个异常可以使用逗号隔开。当在主函数中调用该方法时，如果发生异常，就会将异常抛给指定异常对象。<br style=\"outline: 0px; overflow-wrap: break-word;\">throw关键字通常用在方法体中，并且抛出一个异常对象。程序在执行到throw语句时立即停止，它后面的语句都不执行。通常throw抛出异常后，如果想在上一级代码中捕获并处理异常，则需要在抛出异常的方法中使用throws关键字在方法声明中指定要抛出的异常；如果要捕获throw抛出的异常，则必须使用try{}catch{}语句。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.5. 请说说final、finally与finalize的区别？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：final用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。内部类要访问局部变量，局部变量必须定义成final类型。<br style=\"outline: 0px; overflow-wrap: break-word;\">finally是异常处理语句结构的一部分，表示总是执行。<br style=\"outline: 0px; overflow-wrap: break-word;\">finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提高垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.6. 请说说异常的注意事项及如何使用异常处理？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：1. 子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。<br style=\"outline: 0px; overflow-wrap: break-word;\">2. 如果父类抛出了多个异常，子类重写父类时，只能抛出相同的异常或者是他的子集，子类不能抛出父类没有的异常。<br style=\"outline: 0px; overflow-wrap: break-word;\">3. 如果被重写的方法没有异常抛出，那么子类的方法绝对不可以抛出异常，如果子类方法内有异常发生，那么子类只能try…catch，不能throws</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.7. 请说说文件名称过滤器FilenameFilter的作用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：FilenameFilter是文件名过滤器，用来过滤不符合规则的文件名，并返回合格的文件。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.8. 请说出最常见到的RuntimeException异常。</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：<br style=\"outline: 0px; overflow-wrap: break-word;\">NullPointerException - 空指针引用异常<br style=\"outline: 0px; overflow-wrap: break-word;\">ClassCastException - 类型强制转换异常<br style=\"outline: 0px; overflow-wrap: break-word;\">IllegalArgumentException - 传递非法参数异常<br style=\"outline: 0px; overflow-wrap: break-word;\">ArithmeticException - 算术运算异常<br style=\"outline: 0px; overflow-wrap: break-word;\">ArrayStoreException - 向数组中存放与声明类型不兼容对象异常<br style=\"outline: 0px; overflow-wrap: break-word;\">IndexOutOfBoundsException - 下标越界异常<br style=\"outline: 0px; overflow-wrap: break-word;\">NumberFormatException - 数字格式异常</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.9. 请简述递归是什么?注意事项是什么?</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：所谓递归，是指程序调用自身。注意，递归不会无休止地调用下去，它必然有一个出口，当满足条件时程序也就结束了，不然的话，那就是死循环了。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.10. 请简述IO流的分类</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：IO流<br style=\"outline: 0px; overflow-wrap: break-word;\">|- 字节流<br style=\"outline: 0px; overflow-wrap: break-word;\">|-字节输入流 InputStream<br style=\"outline: 0px; overflow-wrap: break-word;\">|-字节输出流 OutputStream<br style=\"outline: 0px; overflow-wrap: break-word;\">|- 字符流<br style=\"outline: 0px; overflow-wrap: break-word;\">|-字符输入流 Reader<br style=\"outline: 0px; overflow-wrap: break-word;\">|-字符输出流 Writer</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.11. 请简述字符编码是什么？请说出常见字符编码表？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：字符编码（英语：Character encoding）也称字集码，是把字符集中的字符编码为指定集合中某一对象，以便文本在计算机中存储和通过通信网络的传递。常见的例子包括将拉丁字母表编码成摩斯电码和ASCII。其中，ASCII将字母、数字和其他符号编号，并用7比特的二进制来表示这个整数。通常会额外使用一个扩充的比特，以便以1个字节的方式存储。<br style=\"outline: 0px; overflow-wrap: break-word;\">常见的字符编码表如下：<br style=\"outline: 0px; overflow-wrap: break-word;\">ASCII<br style=\"outline: 0px; overflow-wrap: break-word;\">GB2312：是一个简体中文字符集，由6763个常用汉字和682个全角的非汉字字符组成。<br style=\"outline: 0px; overflow-wrap: break-word;\">GBK：GBK编码标准兼容GB2312，共收录汉字21003个、符号883个，并提供1894个造字码位，简、繁体字融于一库<br style=\"outline: 0px; overflow-wrap: break-word;\">GB18030：是在GBK基础上增加了一部分汉字<br style=\"outline: 0px; overflow-wrap: break-word;\">Big5：在台湾、香港与澳门地区，使用的是繁体中文字符集<br style=\"outline: 0px; overflow-wrap: break-word;\">Unicode：将世界上所有的符号都纳入其中，无论是英文、日文、还是中文等，大家都使用这个编码表，这样就利于同一的管理,在这个编码表中每一个字符占两个字节<br style=\"outline: 0px; overflow-wrap: break-word;\">UTF-8：为了提高Unicode的编码效率，于是就出现了UTF-8编码。UTF-8可以根据不同的符号自动选择编码的长短。比如英文字母可以只用1个字节就够了。</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.12. 请说出学习过的IO流中的常用方法？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：字节输入流 InputStream<br style=\"outline: 0px; overflow-wrap: break-word;\">read() 读取一个字节<br style=\"outline: 0px; overflow-wrap: break-word;\">read(byte[]) 读取一个字节数组<br style=\"outline: 0px; overflow-wrap: break-word;\">字节输出流<br style=\"outline: 0px; overflow-wrap: break-word;\">write(int) 写入一个字节<br style=\"outline: 0px; overflow-wrap: break-word;\">write(byte[]) 写入一个字节数组<br style=\"outline: 0px; overflow-wrap: break-word;\">字符输入流<br style=\"outline: 0px; overflow-wrap: break-word;\">read() 读取一个字符<br style=\"outline: 0px; overflow-wrap: break-word;\">read(char[]) 读取一个字符数组<br style=\"outline: 0px; overflow-wrap: break-word;\">字符缓冲输入流<br style=\"outline: 0px; overflow-wrap: break-word;\">readLine() 读取一行字符串<br style=\"outline: 0px; overflow-wrap: break-word;\">字符输出流<br style=\"outline: 0px; overflow-wrap: break-word;\">write(int) 写入一个字符<br style=\"outline: 0px; overflow-wrap: break-word;\">write(char[]) 写入一个字符数组<br style=\"outline: 0px; overflow-wrap: break-word;\">write(String) 写入一个字符串<br style=\"outline: 0px; overflow-wrap: break-word;\">字符缓冲输出流<br style=\"outline: 0px; overflow-wrap: break-word;\">newLine() 写入一个换行符</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.13. 请说出转换流OutputStreamWriter与InputStreamReader 的作用？</span><br style=\"outline: 0px; overflow-wrap: break-word;\">答案：OutputStreamWriter：使用编码表对字节流的数据进行编码<br style=\"outline: 0px; overflow-wrap: break-word;\">InputStreamReader：使用编码表对字节流中的数据进行解码</p><p style=\"outline: 0px; margin-top: 0px; margin-bottom: 16px; font-size: 18px; color: rgb(77, 77, 77); line-height: 26px; overflow-wrap: break-word;\"><span style=\"outline: 0px; font-weight: 700; overflow-wrap: break-word;\">5.14. 请简述打印流(PrintStream、PrintWriter)的特点？</span>&nbsp;<br style=\"outline: 0px; overflow-wrap: break-word;\">答案：PrintStream在OutputStream基础之上提供了增强的功能，即可以方便地输出各种类型的数据（而不仅限于byte类型）的格式化表示形式。PrintStream的方法从不抛出IOException<br style=\"outline: 0px; overflow-wrap: break-word;\">PrintWriter提供了PrintStream的所有打印方法，其方法也从不抛出IOException。<br style=\"outline: 0px; overflow-wrap: break-word;\">与PrintStream的区别：作为处理流使用时，PrintStream只能封装OutputStream类型的字节流，而PrintWriter既可以封装OutputStream类型的字节流，还能够封装Writer类型的字符输出流并增强其功能。</p></div></div></article>',1604696887,1604696952,'https://blog.csdn.net/weixin_51539510/article/details/109489732?utm_medium=distribute.pc_category.none-task-blog-hot-6.nonecase&depth_1-utm_source=distribute.pc_category.none-task-blog-hot-6.nonecase','本页',1,0,NULL,'Java基础知识',9),(4,'10','视频测试','<div class=\"play-window\" id=\"bofang_box\">    <script type=\"text/javascript\" src=\"https://www.yunbtv.com/static/js/playerconfig.js?t=20201030\"></script>    <script type=\"text/javascript\" src=\"https://www.yunbtv.com/static/js/player.js?t=20201030\"></script>    <style>.MacPlayer{background: #000000;font-size:14px;color:#F6F6F6;margin:0px;padding:0px;position:relative;overflow:hidden;width:100%;height:660px;min-height:640px;}.MacPlayer table{width:100%;height:640px;}.MacPlayer #playleft{position:inherit;!important;width:100%;height:640px;}</style>    <div class=\"MacPlayer\">     <iframe id=\"buffer\" src=\"\" frameborder=\"0\" scrolling=\"no\" width=\"100%\" height=\"640px\" style=\"position: absolute; z-index: 99998; display: none;\"></iframe>     <iframe id=\"install\" src=\"\" frameborder=\"0\" scrolling=\"no\" width=\"100%\" height=\"640px\" style=\"position:absolute;z-index:99998;display:none;\"></iframe>     <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">      <tbody>       <tr>        <td id=\"playleft\" valign=\"top\"><iframe width=\"100%\" height=\"640px\" src=\"http://player.yapi.xyz/p2p.php?url=https://v5.szjal.cn/20201103/XhTaIQ4T/index.m3u8\" frameborder=\"0\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" msallowfullscreen=\"msallowfullscreen\" oallowfullscreen=\"oallowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\"></iframe></td>       </tr>      </tbody>     </table>    </div> <!--    <script> MacPlayer.Html = \'<iframe width=\"100%\" height=\"640px\" src=\"//player.yapi.xyz/p2p.php?url=https://v5.szjal.cn/20201103/XhTaIQ4T/index.m3u8\" frameborder=\"0\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" msallowfullscreen=\"msallowfullscreen\" oallowfullscreen=\"oallowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\"></iframe>\'; MacPlayer.Show(); </script> -->    <!--    <script src=\"https://www.yunbtv.com/static/player/ckm3u8.js\"></script>-->   </div><p><br></p>',1604809399,1604907732,'收集自网络，仅供学习，不得用于商业用途。','本页',5,0,NULL,'视频测试',206);

#
# Structure for table "blog_imgshow"
#

DROP TABLE IF EXISTS `blog_imgshow`;
CREATE TABLE `blog_imgshow` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `imglink` varchar(255) DEFAULT NULL COMMENT '首页图片',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='首页图片';

#
# Data for table "blog_imgshow"
#

INSERT INTO `blog_imgshow` VALUES (11,'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1783995481,3672177359&fm=26&gp=0.jpg',1604699024,1604699024),(12,'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=16207085,969658569&fm=26&gp=0.jpg',1604699034,1604699034),(13,'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2134829550,3120755721&fm=26&gp=0.jpg',1604699043,1604699043),(14,'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1407433045,2151629447&fm=26&gp=0.jpg',1604699052,1604699052),(15,'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1604266184660&di=8ef2dcf520d09eee25f601b9f5b44003&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2Fd%2F55b6e554d1cd8.jpg',1604699077,1604699077),(16,'http://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1602637956914&di=d85ae10a4736c4e4375912c2aead5780&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201408%2F05%2F183349h1d4a4anxxf41y4x.jpg',1604699095,1604699095),(17,'images/2020-11-07/1604699104.png',1604699108,1604699108);

#
# Structure for table "blog_links"
#

DROP TABLE IF EXISTS `blog_links`;
CREATE TABLE `blog_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `link` varchar(255) DEFAULT NULL COMMENT '链接',
  `name` varchar(255) DEFAULT NULL COMMENT '友链名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='友链表';

#
# Data for table "blog_links"
#

INSERT INTO `blog_links` VALUES (1,'https://www.scarecrow.top/','ScarecrowBlog'),(2,'http://www.chengtzu.com','橙子成博客');

#
# Structure for table "blog_motto"
#

DROP TABLE IF EXISTS `blog_motto`;
CREATE TABLE `blog_motto` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(2048) DEFAULT NULL COMMENT '内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='铭言表';

#
# Data for table "blog_motto"
#

INSERT INTO `blog_motto` VALUES (1,'带着新奇与未知，从开始来到开始，一切都是那么美好。\n懵懂成长，过程有如最初的秘密，不断揭示。\n然而，真实是那么的真实，触手可及。\n无尽的悲伤与希望，\n终将如来。');

#
# Structure for table "blog_subcategory"
#

DROP TABLE IF EXISTS `blog_subcategory`;
CREATE TABLE `blog_subcategory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` varchar(255) DEFAULT NULL COMMENT '主分类id',
  `name` varchar(255) DEFAULT NULL COMMENT '子分类名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='子分类表';

#
# Data for table "blog_subcategory"
#

INSERT INTO `blog_subcategory` VALUES (1,'1','PHP'),(2,'1','前端开发'),(3,'1','Mysql'),(4,'1','Linux'),(5,'1','微信开发'),(6,'1','Python'),(7,'1','Java'),(8,'1','技术之外'),(9,'2','凤凰古城游'),(10,'5','视频测试');

#
# Structure for table "blog_users"
#

DROP TABLE IF EXISTS `blog_users`;
CREATE TABLE `blog_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) DEFAULT NULL COMMENT '用户密码',
  `sex` tinyint(1) unsigned DEFAULT '0' COMMENT '用户性别，0男，1女',
  `head` varchar(255) DEFAULT NULL COMMENT '图像',
  `create_time` int(11) unsigned DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) unsigned DEFAULT NULL COMMENT '更新时间',
  `deleteflag` tinyint(1) unsigned DEFAULT '0' COMMENT '删除标志，0不删除，1删除',
  `type` tinyint(1) unsigned DEFAULT '0' COMMENT '审核，0为不通过，1为通过',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='后台用户表';

#
# Data for table "blog_users"
#

INSERT INTO `blog_users` VALUES (1,'张傻','c33367701511b4f6020ec61ded352059',0,NULL,1603707136,1604449453,0,1);

#
# Structure for table "blog_usersaccess"
#

DROP TABLE IF EXISTS `blog_usersaccess`;
CREATE TABLE `blog_usersaccess` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) DEFAULT NULL COMMENT '用户id',
  `token` varchar(255) DEFAULT NULL COMMENT '用户令牌',
  `create_time` int(11) DEFAULT NULL COMMENT '令牌创建时间',
  `expire_time` int(11) DEFAULT NULL COMMENT '令牌到期时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='用户token表';

#
# Data for table "blog_usersaccess"
#

INSERT INTO `blog_usersaccess` VALUES (1,1,'fbP9X5HTxXjfb3pDDacxraSUm5zCjeBMFSVYV3xshMqP4BnKR7TA4XZYucTNVskvJ2nZxb',1602965250,1603051650),(2,1,'UL4kDSHXe3JZaA8b6VggWfhbKhjpJLgrjYaVPhXTn5LGhSKURmuhdzThxLKEPqbZHqc',1603074493,1603160893),(3,1,'HQcCL8RH2Z2KrjqfAzYZJj8qAAh2Y5B3PGYMHQHF34GLXYKZ3nMGTUsbzEcJ855rtUzpLfe76TBgtk',1603162094,1603248494),(4,1,'AJHGR3kVNHcPXNhzHENXDk8dWYWxzcHZaLvDabB3AWhuResaL53pLEy2qTXDS5hRuN7',1603271229,1603357629),(5,1,'CWEcQ3PAvBJL6nBpkQLf5DKTbT7myN69wCGnFsAbV5c4LtZRH2BCh6dr2k98J5u9Sr3MVJ7Cn4sU',1603400917,1603487317),(6,1,'rFCtmxXALyhF5Fa2Cq2MGLTnPUNuEKHCa3K9ygc4fPGj4UMT7wRTWyUB5TnA9Xp8P',1603571795,1603658195),(8,1,'cACpk7g5gEqYNWr7DJbJ7q5AcLZQBKyyqLyxvC7WZTHKcRxFqbtQBgZ5eejJa3Y',1604055617,1604142017),(9,1,'JGHXu5na97geCA5ayNsdTBFgSMMyhXnjyhyaCWUdCeTuJCdg5ShNnBgvR9MDMQ',1604444848,1604531248),(10,1,'asXpmEVpTDP4QXaHtgnmeaLwZhVGSVMxBRUnE3jVyHHjEEVk92Jg74hdDJCWG',1604617959,1604704359),(11,1,'vMdeEEguxMCqAr3ZdSehT7uMhLdWQdNSfcSMxpuXdKb4gr5MaUjVWm2gG38xsRCKxEs',1604809220,1604895620);
